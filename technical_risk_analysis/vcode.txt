### Findings & Recommendations

### Detailed Flaws by Severity

#### [Very High (2 Flaws)]

### [Code Injection (2 flaws)]

#### Description

Code injection is the process of injecting untrusted input into an application
that dynamically evalutes and executes the input as code. Common examples of
code injection include Remote File Includes and Eval Injection into
applications implemented in an interpreted language such as PHP.

#### Recommendations

Do not allow untrusted input to be evaluated or otherwise interpreted as code.

#### Associated Flaws by CWE ID:

### [Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') ][CWE ID 95](http://cwe.mitre.org/data/definitions/95.html) (2 Flaws)

#### Effort to Fix

3 - Complex implementation error. Fix is approx. 51-500 lines of code. Up to 5
days to fix.

#### Description

The software allows user-controlled input to be fed directly into a function
(e.g. "eval") that dynamically evaluates and executes the input as code,
usually in the same interpreted language that the product uses.

#### Recommendations

Validate all user-supplied input to ensure that it conforms to the expected
format, using centralized data validation routines when possible. In general,
avoid executing code derived from untrusted input.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

2

plupload.silverlight.xap

System.Windows.Browser.ScriptObject get_EventTarget() 95%

moxie_dll.Moxiecode.Moxie

Likely

11/9/14

1

silverlightmediaelement.xap

void !ctor(System.Collections.Generic.IDictionary<string,string>) 98%

silverlightmediaelement_dll.SilverlightMediaElement.MainPage

Likely

11/9/14

#### [High (8 Flaws)]

### [Code Injection (1 flaw)]

#### Description

Code injection is the process of injecting untrusted input into an application
that dynamically evalutes and executes the input as code. Common examples of
code injection include Remote File Includes and Eval Injection into
applications implemented in an interpreted language such as PHP.

#### Recommendations

Do not allow untrusted input to be evaluated or otherwise interpreted as code.

#### Associated Flaws by CWE ID:

### [Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') ][CWE ID 98](http://cwe.mitre.org/data/definitions/98.html) (1 Flaw)

#### Effort to Fix

3 - Complex implementation error. Fix is approx. 51-500 lines of code. Up to 5
days to fix.

#### Description

The PHP application receives user-supplied input but does not properly
restrict the input before using it in require(), include(), or similar
functions. This can allow an attacker to specify a URL to a remote location
from which the application will retrieve code and execute it.

#### Recommendations

Validate all user-supplied input to ensure that it conforms to the expected
format, using centralized data validation routines when possible. Use white
lists to specify known safe values rather than relying on black lists to
detect malicious input.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

168

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/update.php 90

ctf-f2014/www/wp-admin/update.php

Likely

11/9/14

### [SQL Injection (7 flaws)]

#### Description

SQL injection vulnerabilities occur when data enters an application from an
untrusted source and is used to dynamically construct a SQL query. This allows
an attacker to manipulate database queries in order to access, modify, or
delete arbitrary data. Depending on the platform, database type, and
configuration, it may also be possible to execute administrative operations on
the database, access the filesystem, or execute arbitrary system commands. SQL
injection attacks can also be used to subvert authentication and authorization
schemes, which would enable an attacker to gain privileged access to
restricted portions of the application.

#### Recommendations

Several techniques can be used to prevent SQL injection attacks. These
techniques complement each other and address security at different points in
the application. Using multiple techniques provides defense-in-depth and
minimizes the likelihood of a SQL injection vulnerability.

  * Use parameterized prepared statements rather than dynamically constructing SQL queries. This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection.
  * Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. 
  * Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded (%xx), HTML-encoded (&#xx;), or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters.
  * When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks. Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner.

#### Associated Flaws by CWE ID:

### [Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') ][CWE ID 89](http://cwe.mitre.org/data/definitions/89.html) (7 Flaws)

#### Effort to Fix

3 - Complex implementation error. Fix is approx. 51-500 lines of code. Up to 5
days to fix.

#### Description

This database query contains a SQL injection flaw. The function call
constructs a dynamic SQL query using a variable derived from user-supplied
input. An attacker could exploit this flaw to execute arbitrary SQL queries
against the database.

#### Recommendations

Avoid dynamically constructing SQL queries. Instead, use parameterized
prepared statements to prevent the database from interpreting the contents of
bind variables as part of the query. Always validate user-supplied input to
ensure that it conforms to the expected format, using centralized data
validation routines when possible.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

87

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 30

ctf-f2014/www/board.php

Likely

11/9/14

36

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/dblib.php 23

ctf-f2014/www/includes/dblib.php

Likely

11/9/14

60

PHP files within ctf-f2014.zip

ctf-f2014/.../scoreboard/index.php 50

ctf-f2014/www/scoreboard/index.php

Likely

11/9/14

180

PHP files within ctf-f2014.zip

ctf-f2014/.../scoreboard/index.php 60

ctf-f2014/www/scoreboard/index.php

Likely

11/9/14

118

PHP files within ctf-f2014.zip

ctf-f2014/.../Cache/MySQL.php 344

ctf-f2014/www/wp-includes/SimplePie/Cache/MySQL.php

Likely

11/9/14

196

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-db.php 795

ctf-f2014/www/wp-includes/wp-db.php

Likely

11/9/14

22

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-db.php 797

ctf-f2014/www/wp-includes/wp-db.php

Likely

11/9/14

#### [Medium (188 Flaws)]

### [Credentials Management (9 flaws)]

#### Description

Improper management of credentials, such as usernames and passwords, may
compromise system security. In particular, storing passwords in plaintext or
hard-coding passwords directly into application code are design issues that
cannot be easily remedied. Not only does embedding a password allow all of the
project's developers to view the password, it also makes fixing the problem
extremely difficult. Once the code is in production, the password cannot be
changed without patching the software. If a hard-coded password is compromised
in a commercial product, all deployed instances may be vulnerable to attack,
putting customers at risk.

One variation on hard-coding plaintext passwords is to hard-code a constant
string which is the result of a cryptographic one-way hash. For example,
instead of storing the word "secret," the application stores an MD5 hash of
the word. This is a common mechanism for obscuring hard-coded passwords from
casual viewing but does not significantly reduce risk. However, using
cryptographic hashes for data stored outside the application code can be an
effective practice.

#### Recommendations

Avoid storing passwords in easily accessible locations, and never store any
type of sensitive data in plaintext. Avoid using hard-coded usernames,
passwords, or hash constants whenever possible, particularly in relation to
security-critical components. Store passwords out-of-band from the application
code. Follow best practices for protecting credentials stored in alternate
locations such as configuration or properties files.

#### Associated Flaws by CWE ID:

### [Use of Hard-coded Password ][CWE ID 259](http://cwe.mitre.org/data/definitions/259.html) (9 Flaws)

#### Effort to Fix

4 - Simple design error. Requires redesign and up to 5 days to fix.

#### Description

A method uses a hard-coded password that may compromise system security in a
way that cannot be easily remedied. The use of a hard-coded password
significantly increases the possibility that the account being protected will
be compromised. Moreover, the password cannot be changed without patching the
software. If a hard-coded password is compromised in a commercial product, all
deployed instances may be vulnerable to attack.

#### Recommendations

Store passwords out-of-band from the application code. Follow best practices
for protecting credentials stored in locations such as configuration or
properties files.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

71

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 15

ctf-f2014/www/board.php

Likely

11/9/14

163

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 18

ctf-f2014/www/board.php

Likely

11/9/14

91

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/dblib.php 3

ctf-f2014/www/includes/dblib.php

Likely

11/9/14

191

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/dblib.php 6

ctf-f2014/www/includes/dblib.php

Likely

11/9/14

169

PHP files within ctf-f2014.zip

ctf-f2014/.../scoreboard/index.php 31

ctf-f2014/www/scoreboard/index.php

Likely

11/9/14

8

PHP files within ctf-f2014.zip

ctf-f2014/.../scoreboard/index.php 34

ctf-f2014/www/scoreboard/index.php

Likely

11/9/14

105

PHP files within ctf-f2014.zip

ctf-f2014/.../scoreboard/index.php 106

ctf-f2014/www/scoreboard/index.php

Likely

11/9/14

121

PHP files within ctf-f2014.zip

ctf-f2014/.../scoreboard/index.php 109

ctf-f2014/www/scoreboard/index.php

Likely

11/9/14

205

PHP files within ctf-f2014.zip

ctf-f2014/.../network/site-new.php 74

ctf-f2014/www/wp-admin/network/site-new.php

Likely

11/9/14

### [Cross-Site Scripting (75 flaws)]

#### Description

Cross-site scripting (XSS) attacks occur when an attacker uses a web
application to send malicious code, generally in the form of a browser side
script, to a different end user. Flaws that allow these attacks to succeed
occur whenever a web application uses untrusted data in the output it
generates without validating or encoding it. XSS vulnerabilities are commonly
exploited to steal or manipulate cookies, modify presentation of content, and
compromise sensitive information, with new attack vectors being discovered on
a regular basis. XSS is also commonly referred to as HTML injection.

XSS vulnerabilities can be either persistent or transient (often referred to
as stored and reflected, respectively). In a persistent XSS vulnerability, the
injected code is stored by the application, for example within a blog comment
or message board. The attack occurs whenever a victim views the page
containing the malicious script. In a transient XSS vulnerability, the
injected code is included directly in the HTTP request. These attacks are
often carried out via malicious URLs sent via email or another website and
requires the victim to browse to that link. The consequence of an XSS attack
to a victim is the same regardless of whether it is persistent or transient;
however, persistent XSS vulnerabilities are likely to affect a greater number
of victims due to its delivery mechanism.

#### Recommendations

Several techniques can be used to prevent XSS attacks. These techniques
complement each other and address security at different points in the
application. Using multiple techniques provides defense-in-depth and minimizes
the likelihood of a XSS vulnerability.

  * Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data. For example, if the data is being written to the body of an HTML page, use HTML entity encoding. However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code (a common technique in Web 2.0 applications), additional restrictions may be necessary beyond simple HTML encoding.
  * Validate user-supplied input using positive filters (white lists) to ensure that it conforms to the expected format, using centralized data validation routines when possible. 
  * Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application. If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse.

#### Associated Flaws by CWE ID:

### [Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) ][CWE ID 80](http://cwe.mitre.org/data/definitions/80.html) (75 Flaws)

#### Effort to Fix

3 - Complex implementation error. Fix is approx. 51-500 lines of code. Up to 5
days to fix.

#### Description

This call contains a cross-site scripting (XSS) flaw. The application
populates the HTTP response with user-supplied input, allowing an attacker to
embed malicious content, such as Javascript code, which will be executed in
the context of the victim's browser. XSS vulnerabilities are commonly
exploited to steal or manipulate cookies, modify presentation of content, and
compromise confidential information, with new attack vectors being discovered
on a regular basis.

#### Recommendations

Use contextual escaping on all untrusted data before using it to construct any
portion of an HTTP response. The escaping method should be chosen based on the
specific use case of the untrusted data, otherwise it may not protect fully
against the attack. For example, if the data is being written to the body of
an HTML page, use HTML entity escaping; if the data is being written to an
attribute, use attribute escaping; etc. Both the OWASP ESAPI library for Java
and the Microsoft AntiXSS library provide contextual escaping methods. For
more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%
%28Cross_Site_Scripting%%29_Prevention_Cheat_Sheet. In addition, as a best
practice, always validate user-supplied input to ensure that it conforms to
the expected format, using centralized data validation routines when possible.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

46

PHP files within ctf-f2014.zip

ctf-f2014/.../ajax-actions.php 1795

ctf-f2014/www/wp-admin/includes/ajax-actions.php

Likely

11/9/14

209

PHP files within ctf-f2014.zip

ctf-f2014/.../ajax-actions.php 2748

ctf-f2014/www/wp-admin/includes/ajax-actions.php

Likely

11/9/14

131

PHP files within ctf-f2014.zip

ctf-f2014/.../async-upload.php 68

ctf-f2014/www/wp-admin/async-upload.php

Likely

11/9/14

166

PHP files within ctf-f2014.zip

ctf-f2014/.../async-upload.php 72

ctf-f2014/www/wp-admin/async-upload.php

Likely

11/9/14

177

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 43

ctf-f2014/www/board.php

Likely

11/9/14

170

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 44

ctf-f2014/www/board.php

Likely

11/9/14

122

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 50

ctf-f2014/www/board.php

Likely

11/9/14

56

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 58

ctf-f2014/www/board.php

Likely

11/9/14

12

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 59

ctf-f2014/www/board.php

Likely

11/9/14

88

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 64

ctf-f2014/www/board.php

Likely

11/9/14

172

PHP files within ctf-f2014.zip

.../includes/class-ftp-pure.php 81

ctf-f2014/www/wp-admin/includes/class-ftp-pure.php

Likely

11/9/14

154

PHP files within ctf-f2014.zip

.../includes/class-ftp-pure.php 91

ctf-f2014/www/wp-admin/includes/class-ftp-pure.php

Likely

11/9/14

65

PHP files within ctf-f2014.zip

.../includes/class-ftp-sockets.php 92

ctf-f2014/www/wp-admin/includes/class-ftp-sockets.php

Likely

11/9/14

137

PHP files within ctf-f2014.zip

.../includes/class-ftp-sockets.php 102

ctf-f2014/www/wp-admin/includes/class-ftp-sockets.php

Likely

11/9/14

184

PHP files within ctf-f2014.zip

ctf-f2014/.../class-ftp.php 228

ctf-f2014/www/wp-admin/includes/class-ftp.php

Likely

11/9/14

49

PHP files within ctf-f2014.zip

.../class-phpmailer.php 631

ctf-f2014/www/wp-includes/class-phpmailer.php

Likely

11/9/14

42

PHP files within ctf-f2014.zip

ctf-f2014/.../class-smtp.php 168

ctf-f2014/www/wp-includes/class-smtp.php

Likely

11/9/14

206

PHP files within ctf-f2014.zip

.../class-wp-comments-list-table.php 536

ctf-f2014/www/wp-admin/includes/class-wp-comments-list-table.php

Likely

11/9/14

67

PHP files within ctf-f2014.zip

.../class-wp-editor.php 1104

ctf-f2014/www/wp-includes/class-wp-editor.php

Likely

11/9/14

109

PHP files within ctf-f2014.zip

.../class-wp-list-table.php 564

ctf-f2014/www/wp-admin/includes/class-wp-list-table.php

Likely

11/9/14

134

PHP files within ctf-f2014.zip

.../class-wp-ms-users-list-table.php 189

ctf-f2014/www/wp-admin/includes/class-wp-ms-users-list-table.php

Likely

11/9/14

84

PHP files within ctf-f2014.zip

.../wp-admin/edit-comments.php 220

ctf-f2014/www/wp-admin/edit-comments.php

Likely

11/9/14

212

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/file.php 1097

ctf-f2014/www/wp-admin/includes/file.php

Likely

11/9/14

187

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/import.php 116

ctf-f2014/www/wp-admin/import.php

Likely

11/9/14

53

PHP files within ctf-f2014.zip

ctf-f2014/.../scoreboard/index.php 114

ctf-f2014/www/scoreboard/index.php

Likely

11/9/14

10

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/install.php 176

ctf-f2014/www/wp-admin/install.php

Likely

11/9/14

24

PHP files within ctf-f2014.zip

ctf-f2014/.../link-manager.php 81

ctf-f2014/www/wp-admin/link-manager.php

Likely

11/9/14

183

PHP files within ctf-f2014.zip

ctf-f2014/.../load-scripts.php 161

ctf-f2014/www/wp-admin/load-scripts.php

Likely

11/9/14

202

PHP files within ctf-f2014.zip

ctf-f2014/.../load-styles.php 152

ctf-f2014/www/wp-admin/load-styles.php

Likely

11/9/14

72

PHP files within ctf-f2014.zip

.../wp-includes/media-template.php 236

ctf-f2014/www/wp-includes/media-template.php

Likely

11/9/14

179

PHP files within ctf-f2014.zip

.../wp-includes/media-template.php 239

ctf-f2014/www/wp-includes/media-template.php

Likely

11/9/14

76

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/media.php 121

ctf-f2014/www/wp-admin/media.php

Likely

11/9/14

78

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/media.php 2368

ctf-f2014/www/wp-admin/includes/media.php

Likely

11/9/14

186

PHP files within ctf-f2014.zip

ctf-f2014/.../my-sites.php 119

ctf-f2014/www/wp-admin/my-sites.php

Likely

11/9/14

114

PHP files within ctf-f2014.zip

ctf-f2014/.../nav-menu.php 133

ctf-f2014/www/wp-admin/includes/nav-menu.php

Likely

11/9/14

92

PHP files within ctf-f2014.zip

ctf-f2014/.../nav-menu.php 692

ctf-f2014/www/wp-admin/includes/nav-menu.php

Likely

11/9/14

178

PHP files within ctf-f2014.zip

ctf-f2014/.../nav-menu.php 697

ctf-f2014/www/wp-admin/includes/nav-menu.php

Likely

11/9/14

86

PHP files within ctf-f2014.zip

ctf-f2014/.../nav-menu.php 702

ctf-f2014/www/wp-admin/includes/nav-menu.php

Likely

11/9/14

171

PHP files within ctf-f2014.zip

ctf-f2014/.../nav-menu.php 932

ctf-f2014/www/wp-admin/includes/nav-menu.php

Likely

11/9/14

116

PHP files within ctf-f2014.zip

ctf-f2014/.../nav-menu.php 937

ctf-f2014/www/wp-admin/includes/nav-menu.php

Likely

11/9/14

64

PHP files within ctf-f2014.zip

ctf-f2014/.../nav-menu.php 942

ctf-f2014/www/wp-admin/includes/nav-menu.php

Likely

11/9/14

104

PHP files within ctf-f2014.zip

.../wp-admin/plugin-editor.php 245

ctf-f2014/www/wp-admin/plugin-editor.php

Likely

11/9/14

193

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/plugins.php 311

ctf-f2014/www/wp-admin/plugins.php

Likely

11/9/14

79

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/plugins.php 402

ctf-f2014/www/wp-admin/plugins.php

Likely

11/9/14

162

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/post.php 1461

ctf-f2014/www/wp-admin/includes/post.php

Likely

11/9/14

9

PHP files within ctf-f2014.zip

ctf-f2014/.../press-this.php 154

ctf-f2014/www/wp-admin/press-this.php

Likely

11/9/14

57

PHP files within ctf-f2014.zip

ctf-f2014/.../press-this.php 208

ctf-f2014/www/wp-admin/press-this.php

Likely

11/9/14

199

PHP files within ctf-f2014.zip

ctf-f2014/.../press-this.php 219

ctf-f2014/www/wp-admin/press-this.php

Likely

11/9/14

124

PHP files within ctf-f2014.zip

ctf-f2014/.../press-this.php 265

ctf-f2014/www/wp-admin/press-this.php

Likely

11/9/14

143

PHP files within ctf-f2014.zip

ctf-f2014/.../press-this.php 376

ctf-f2014/www/wp-admin/press-this.php

Likely

11/9/14

123

PHP files within ctf-f2014.zip

ctf-f2014/.../press-this.php 424

ctf-f2014/www/wp-admin/press-this.php

Likely

11/9/14

6

PHP files within ctf-f2014.zip

ctf-f2014/.../setup-config.php 308

ctf-f2014/www/wp-admin/setup-config.php

Likely

11/9/14

63

PHP files within ctf-f2014.zip

ctf-f2014/.../setup-config.php 337

ctf-f2014/www/wp-admin/setup-config.php

Likely

11/9/14

68

PHP files within ctf-f2014.zip

ctf-f2014/.../theme-editor.php 203

ctf-f2014/www/wp-admin/theme-editor.php

Likely

11/9/14

139

PHP files within ctf-f2014.zip

ctf-f2014/.../network/themes.php 166

ctf-f2014/www/wp-admin/network/themes.php

Likely

11/9/14

89

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/themes.php 198

ctf-f2014/www/wp-admin/themes.php

Likely

11/9/14

111

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/themes.php 204

ctf-f2014/www/wp-admin/themes.php

Likely

11/9/14

165

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/themes.php 207

ctf-f2014/www/wp-admin/themes.php

Likely

11/9/14

126

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/themes.php 209

ctf-f2014/www/wp-admin/themes.php

Likely

11/9/14

11

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/themes.php 216

ctf-f2014/www/wp-admin/themes.php

Likely

11/9/14

85

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/themes.php 219

ctf-f2014/www/wp-admin/themes.php

Likely

11/9/14

90

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/themes.php 221

ctf-f2014/www/wp-admin/themes.php

Likely

11/9/14

74

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/themes.php 222

ctf-f2014/www/wp-admin/themes.php

Likely

11/9/14

97

PHP files within ctf-f2014.zip

ctf-f2014/.../update-core.php 75

ctf-f2014/www/wp-admin/update-core.php

Likely

11/9/14

159

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/upgrade.php 72

ctf-f2014/www/wp-admin/upgrade.php

Likely

11/9/14

140

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/upgrade.php 76

ctf-f2014/www/wp-admin/upgrade.php

Likely

11/9/14

204

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/upgrade.php 100

ctf-f2014/www/wp-admin/upgrade.php

Likely

11/9/14

40

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/upload.php 277

ctf-f2014/www/wp-admin/upload.php

Likely

11/9/14

158

PHP files within ctf-f2014.zip

ctf-f2014/.../user-edit.php 204

ctf-f2014/www/wp-admin/user-edit.php

Likely

11/9/14

47

PHP files within ctf-f2014.zip

ctf-f2014/.../user-edit.php 234

ctf-f2014/www/wp-admin/user-edit.php

Likely

11/9/14

35

PHP files within ctf-f2014.zip

ctf-f2014/.../user-new.php 299

ctf-f2014/www/wp-admin/user-new.php

Likely

11/9/14

54

PHP files within ctf-f2014.zip

ctf-f2014/.../network/users.php 43

ctf-f2014/www/wp-admin/network/users.php

Likely

11/9/14

153

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/widgets.php 287

ctf-f2014/www/wp-admin/widgets.php

Likely

11/9/14

197

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-tinymce.php 36

ctf-f2014/www/wp-includes/js/tinymce/wp-tinymce.php

Likely

11/9/14

39

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-tinymce.php 37

ctf-f2014/www/wp-includes/js/tinymce/wp-tinymce.php

Likely

11/9/14

### [Cryptographic Issues (100 flaws)]

#### Description

Applications commonly use cryptography to implement authentication mechanisms
and to ensure the confidentiality and integrity of sensitive data, both in
transit and at rest. The proper and accurate implementation of cryptography is
extremely critical to its efficacy. Configuration or coding mistakes as well
as incorrect assumptions may negate a large degree of the protection it
affords, leaving the crypto implementation vulnerable to attack.

Common cryptographic mistakes include, but are not limited to, selecting weak
keys or weak cipher modes, unintentionally exposing sensitive cryptographic
data, using predictable entropy sources, and mismanaging or hard-coding keys.

Developers often make the dangerous assumption that they can improve security
by designing their own cryptographic algorithm; however, one of the basic
tenets of cryptography is that any cipher whose effectiveness is reliant on
the secrecy of the algorithm is fundamentally flawed.

#### Recommendations

Select the appropriate type of cryptography for the intended purpose. Avoid
proprietary encryption algorithms as they typically rely on "security through
obscurity" rather than sound mathematics. Select key sizes appropriate for the
data being protected; for high assurance applications, 256-bit symmetric keys
and 2048-bit asymmetric keys are sufficient. Follow best practices for key
storage, and ensure that plaintext data and key material are not inadvertently
exposed.

#### Associated Flaws by CWE ID:

### [Cleartext Storage of Sensitive Information in Memory][CWE ID 316](http://cwe.mitre.org/data/definitions/316.html) (1 Flaw)

#### Effort to Fix

4 - Simple design error. Requires redesign and up to 5 days to fix.

#### Description

The application reads and/or stores sensitive information (such as passwords)
unencrypted in memory, leaving it susceptible to compromise or erroneous
exposure. An attacker with access to the system running the application may be
able to obtain access to this sensitive data by examining core dumps and swap
files, or by attaching to the running process with a debugger and searching
mapped memory pages. Unless memory is explicitly overwritten, the sensitive
information will persist until it is garbage collected and reallocated for
other purposes.

#### Recommendations

Try to avoid storing sensitive data in plaintext. When possible, always clear
sensitive data after use by explicitly zeroing out the memory. In languages
that do not provide a mechanism for zeroing out memory, such as Java or C#,
focus on minimizing the risk rather than eliminating it. Try to avoid using
immutable types when handling sensitive information (for example, use a
character array rather than a String). Keep the time window in which sensitive
information is present in memory as short as possible to minimize the
likelihood of it being swapped to disk.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

3

plupload.silverlight.xap

void set_Password(string) 77%

moxie_dll.Moxie.PngEncoder.DeflaterOutputStream

Neutral

11/9/14

### [Insufficient Entropy ][CWE ID 331](http://cwe.mitre.org/data/definitions/331.html) (1 Flaw)

#### Effort to Fix

2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.

#### Description

Standard random number generators do not provide a sufficient amount of
entropy when used for security purposes. Attackers can brute force the output
of pseudorandom number generators such as rand().

#### Recommendations

If this random number is used where security is a concern, such as generating
a session key or session identifier, use a trusted cryptographic random number
generator instead. These can be found on the Windows platform in the CryptoAPI
or in an open source library such as OpenSSL.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

5

plupload.silverlight.xap

string guid(string) 57%

moxie_dll.Moxiecode.MXI.Utils

Unlikely

11/9/14

### [Missing Encryption of Sensitive Data ][CWE ID 311](http://cwe.mitre.org/data/definitions/311.html) (3 Flaws)

#### Effort to Fix

4 - Simple design error. Requires redesign and up to 5 days to fix.

#### Description

The application exposes potentially sensitive data by passing it into a
function unencrypted. This could allow private data such as cryptographic keys
or other sensitive information to be erroneously exposed.

#### Recommendations

Ensure that the application protects all sensitive data from unnecessary
exposure.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

130

PHP files within ctf-f2014.zip

.../includes/class-ftp-sockets.php 138

ctf-f2014/www/wp-admin/includes/class-ftp-sockets.php

Neutral

11/9/14

210

PHP files within ctf-f2014.zip

.../class-wp-filesystem-ftpext.php 68

ctf-f2014/www/wp-admin/includes/class-wp-filesystem-ftpext.php

Neutral

11/9/14

107

PHP files within ctf-f2014.zip

.../class-wp-filesystem-ftpext.php 70

ctf-f2014/www/wp-admin/includes/class-wp-filesystem-ftpext.php

Neutral

11/9/14

### [Use of a Broken or Risky Cryptographic Algorithm][CWE ID 327](http://cwe.mitre.org/data/definitions/327.html) (95 Flaws)

#### Effort to Fix

1 - Trivial implementation error. Fix is up to 5 lines of code. One hour or
less to fix.

#### Description

The use of a broken or risky cryptographic algorithm is an unnecessary risk
that may result in the disclosure of sensitive information.

#### Recommendations

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

136

PHP files within ctf-f2014.zip

ctf-f2014/.../SimplePie/Author.php 103

ctf-f2014/www/wp-includes/SimplePie/Author.php

Likely

11/9/14

29

PHP files within ctf-f2014.zip

ctf-f2014/.../bookmark.php 131

ctf-f2014/www/wp-includes/bookmark.php

Likely

11/9/14

28

PHP files within ctf-f2014.zip

ctf-f2014/.../Caption.php 121

ctf-f2014/www/wp-includes/SimplePie/Caption.php

Likely

11/9/14

34

PHP files within ctf-f2014.zip

ctf-f2014/.../Category.php 103

ctf-f2014/www/wp-includes/SimplePie/Category.php

Likely

11/9/14

55

PHP files within ctf-f2014.zip

ctf-f2014/.../class-pclzip.php 2678

ctf-f2014/www/wp-admin/includes/class-pclzip.php

Likely

11/9/14

41

PHP files within ctf-f2014.zip

ctf-f2014/.../class-pclzip.php 2716

ctf-f2014/www/wp-admin/includes/class-pclzip.php

Likely

11/9/14

167

PHP files within ctf-f2014.zip

ctf-f2014/.../class-phpass.php 67

ctf-f2014/www/wp-includes/class-phpass.php

Likely

11/9/14

75

PHP files within ctf-f2014.zip

ctf-f2014/.../class-phpass.php 70

ctf-f2014/www/wp-includes/class-phpass.php

Likely

11/9/14

50

PHP files within ctf-f2014.zip

ctf-f2014/.../class-phpass.php 139

ctf-f2014/www/wp-includes/class-phpass.php

Likely

11/9/14

96

PHP files within ctf-f2014.zip

ctf-f2014/.../class-phpass.php 141

ctf-f2014/www/wp-includes/class-phpass.php

Likely

11/9/14

81

PHP files within ctf-f2014.zip

ctf-f2014/.../class-phpass.php 144

ctf-f2014/www/wp-includes/class-phpass.php

Likely

11/9/14

7

PHP files within ctf-f2014.zip

ctf-f2014/.../class-phpass.php 146

ctf-f2014/www/wp-includes/class-phpass.php

Likely

11/9/14

15

PHP files within ctf-f2014.zip

.../class-phpmailer.php 1569

ctf-f2014/www/wp-includes/class-phpmailer.php

Likely

11/9/14

100

PHP files within ctf-f2014.zip

.../class-phpmailer.php 2044

ctf-f2014/www/wp-includes/class-phpmailer.php

Likely

11/9/14

213

PHP files within ctf-f2014.zip

.../class-phpmailer.php 2783

ctf-f2014/www/wp-includes/class-phpmailer.php

Likely

11/9/14

52

PHP files within ctf-f2014.zip

ctf-f2014/.../class-pop3.php 182

ctf-f2014/www/wp-includes/class-pop3.php

Likely

11/9/14

120

PHP files within ctf-f2014.zip

.../class-simplepie.php 720

ctf-f2014/www/wp-includes/class-simplepie.php

Likely

11/9/14

93

PHP files within ctf-f2014.zip

ctf-f2014/.../class-smtp.php 416

ctf-f2014/www/wp-includes/class-smtp.php

Likely

11/9/14

73

PHP files within ctf-f2014.zip

ctf-f2014/.../class-smtp.php 424

ctf-f2014/www/wp-includes/class-smtp.php

Likely

11/9/14

95

PHP files within ctf-f2014.zip

ctf-f2014/.../class-snoopy.php 1215

ctf-f2014/www/wp-includes/class-snoopy.php

Likely

11/9/14

189

PHP files within ctf-f2014.zip

.../wp-includes/class-wp-embed.php 192

ctf-f2014/www/wp-includes/class-wp-embed.php

Likely

11/9/14

164

PHP files within ctf-f2014.zip

.../class-wp-ms-themes-list-table.php 347

ctf-f2014/www/wp-admin/includes/class-wp-ms-themes-list-table.php

Likely

11/9/14

201

PHP files within ctf-f2014.zip

.../class-wp-plugins-list-table.php 473

ctf-f2014/www/wp-admin/includes/class-wp-plugins-list-table.php

Likely

11/9/14

174

PHP files within ctf-f2014.zip

.../wp-includes/class-wp-theme.php 203

ctf-f2014/www/wp-includes/class-wp-theme.php

Likely

11/9/14

144

PHP files within ctf-f2014.zip

.../includes/class-wp-upgrader.php 1704

ctf-f2014/www/wp-admin/includes/class-wp-upgrader.php

Likely

11/9/14

188

PHP files within ctf-f2014.zip

ctf-f2014/.../class-wp.php 379

ctf-f2014/www/wp-includes/class-wp.php

Likely

11/9/14

145

PHP files within ctf-f2014.zip

ctf-f2014/.../comment.php 319

ctf-f2014/www/wp-includes/comment.php

Likely

11/9/14

77

PHP files within ctf-f2014.zip

ctf-f2014/.../Copyright.php 93

ctf-f2014/www/wp-includes/SimplePie/Copyright.php

Likely

11/9/14

151

PHP files within ctf-f2014.zip

ctf-f2014/.../SimplePie/Credit.php 102

ctf-f2014/www/wp-includes/SimplePie/Credit.php

Likely

11/9/14

195

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/cron.php 43

ctf-f2014/www/wp-includes/cron.php

Likely

11/9/14

108

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/cron.php 85

ctf-f2014/www/wp-includes/cron.php

Likely

11/9/14

192

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/cron.php 106

ctf-f2014/www/wp-includes/cron.php

Likely

11/9/14

26

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/cron.php 150

ctf-f2014/www/wp-includes/cron.php

Likely

11/9/14

156

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/cron.php 182

ctf-f2014/www/wp-includes/cron.php

Likely

11/9/14

48

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/cron.php 201

ctf-f2014/www/wp-includes/cron.php

Likely

11/9/14

82

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/cron.php 394

ctf-f2014/www/wp-includes/cron.php

Likely

11/9/14

211

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/cron.php 461

ctf-f2014/www/wp-includes/cron.php

Likely

11/9/14

150

PHP files within ctf-f2014.zip

ctf-f2014/.../dashboard.php 836

ctf-f2014/www/wp-admin/includes/dashboard.php

Likely

11/9/14

38

PHP files within ctf-f2014.zip

ctf-f2014/.../dashboard.php 914

ctf-f2014/www/wp-admin/includes/dashboard.php

Likely

11/9/14

94

PHP files within ctf-f2014.zip

ctf-f2014/.../dashboard.php 1229

ctf-f2014/www/wp-admin/includes/dashboard.php

Likely

11/9/14

207

PHP files within ctf-f2014.zip

.../default-constants.php 169

ctf-f2014/www/wp-includes/default-constants.php

Likely

11/9/14

101

PHP files within ctf-f2014.zip

ctf-f2014/.../Enclosure.php 272

ctf-f2014/www/wp-includes/SimplePie/Enclosure.php

Likely

11/9/14

198

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/file.php 495

ctf-f2014/www/wp-admin/includes/file.php

Likely

11/9/14

70

PHP files within ctf-f2014.zip

.../general-template.php 1263

ctf-f2014/www/wp-includes/general-template.php

Likely

11/9/14

58

PHP files within ctf-f2014.zip

.../general-template.php 1283

ctf-f2014/www/wp-includes/general-template.php

Likely

11/9/14

37

PHP files within ctf-f2014.zip

.../general-template.php 1302

ctf-f2014/www/wp-includes/general-template.php

Likely

11/9/14

113

PHP files within ctf-f2014.zip

.../general-template.php 1324

ctf-f2014/www/wp-includes/general-template.php

Likely

11/9/14

132

PHP files within ctf-f2014.zip

.../general-template.php 1352

ctf-f2014/www/wp-includes/general-template.php

Likely

11/9/14

32

PHP files within ctf-f2014.zip

.../general-template.php 1409

ctf-f2014/www/wp-includes/general-template.php

Likely

11/9/14

99

PHP files within ctf-f2014.zip

ctf-f2014/.../ID3/getid3.php 1363

ctf-f2014/www/wp-includes/ID3/getid3.php

Likely

11/9/14

125

PHP files within ctf-f2014.zip

ctf-f2014/.../ID3/getid3.php 1393

ctf-f2014/www/wp-includes/ID3/getid3.php

Likely

11/9/14

173

PHP files within ctf-f2014.zip

ctf-f2014/.../gzdecode.php 322

ctf-f2014/www/wp-includes/SimplePie/gzdecode.php

Likely

11/9/14

142

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/image.php 140

ctf-f2014/www/wp-admin/includes/image.php

Likely

11/9/14

61

PHP files within ctf-f2014.zip

ctf-f2014/.../SimplePie/Item.php 117

ctf-f2014/www/wp-includes/SimplePie/Item.php

Likely

11/9/14

66

PHP files within ctf-f2014.zip

ctf-f2014/.../SimplePie/Item.php 252

ctf-f2014/www/wp-includes/SimplePie/Item.php

Likely

11/9/14

33

PHP files within ctf-f2014.zip

ctf-f2014/.../SimplePie/Item.php 256

ctf-f2014/www/wp-includes/SimplePie/Item.php

Likely

11/9/14

146

PHP files within ctf-f2014.zip

.../wp-includes/link-template.php 1565

ctf-f2014/www/wp-includes/link-template.php

Likely

11/9/14

17

PHP files within ctf-f2014.zip

ctf-f2014/.../Cache/Memcache.php 102

ctf-f2014/www/wp-includes/SimplePie/Cache/Memcache.php

Likely

11/9/14

117

PHP files within ctf-f2014.zip

.../ID3/module.tag.apetag.php 260

ctf-f2014/www/wp-includes/ID3/module.tag.apetag.php

Likely

11/9/14

59

PHP files within ctf-f2014.zip

.../ID3/module.tag.id3v2.php 1433

ctf-f2014/www/wp-includes/ID3/module.tag.id3v2.php

Likely

11/9/14

102

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-blogs.php 111

ctf-f2014/www/wp-includes/ms-blogs.php

Likely

11/9/14

138

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-blogs.php 128

ctf-f2014/www/wp-includes/ms-blogs.php

Likely

11/9/14

103

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-blogs.php 227

ctf-f2014/www/wp-includes/ms-blogs.php

Likely

11/9/14

176

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-blogs.php 419

ctf-f2014/www/wp-includes/ms-blogs.php

Likely

11/9/14

80

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-files.php 55

ctf-f2014/www/wp-includes/ms-files.php

Likely

11/9/14

155

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-functions.php 367

ctf-f2014/www/wp-includes/ms-functions.php

Likely

11/9/14

149

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-functions.php 377

ctf-f2014/www/wp-includes/ms-functions.php

Likely

11/9/14

45

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-functions.php 381

ctf-f2014/www/wp-includes/ms-functions.php

Likely

11/9/14

30

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-functions.php 728

ctf-f2014/www/wp-includes/ms-functions.php

Likely

11/9/14

161

PHP files within ctf-f2014.zip

ctf-f2014/.../ms-functions.php 764

ctf-f2014/www/wp-includes/ms-functions.php

Likely

11/9/14

110

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/ms.php 217

ctf-f2014/www/wp-admin/includes/ms.php

Likely

11/9/14

127

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/ms.php 287

ctf-f2014/www/wp-admin/includes/ms.php

Likely

11/9/14

133

PHP files within ctf-f2014.zip

ctf-f2014/.../pluggable.php 1942

ctf-f2014/www/wp-includes/pluggable.php

Likely

11/9/14

112

PHP files within ctf-f2014.zip

ctf-f2014/.../pluggable.php 2031

ctf-f2014/www/wp-includes/pluggable.php

Likely

11/9/14

152

PHP files within ctf-f2014.zip

ctf-f2014/.../pluggable.php 2034

ctf-f2014/www/wp-includes/pluggable.php

Likely

11/9/14

181

PHP files within ctf-f2014.zip

ctf-f2014/.../pluggable.php 2153

ctf-f2014/www/wp-includes/pluggable.php

Likely

11/9/14

69

PHP files within ctf-f2014.zip

.../includes/plugin-install.php 113

ctf-f2014/www/wp-admin/includes/plugin-install.php

Likely

11/9/14

141

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/post.php 4460

ctf-f2014/www/wp-includes/post.php

Likely

11/9/14

106

PHP files within ctf-f2014.zip

ctf-f2014/.../query.php 1809

ctf-f2014/www/wp-includes/query.php

Likely

11/9/14

208

PHP files within ctf-f2014.zip

ctf-f2014/.../query.php 2393

ctf-f2014/www/wp-includes/query.php

Likely

11/9/14

135

PHP files within ctf-f2014.zip

ctf-f2014/.../SimplePie/Rating.php 93

ctf-f2014/www/wp-includes/SimplePie/Rating.php

Likely

11/9/14

147

PHP files within ctf-f2014.zip

ctf-f2014/.../Restriction.php 102

ctf-f2014/www/wp-includes/SimplePie/Restriction.php

Likely

11/9/14

182

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-includes/rss.php 798

ctf-f2014/www/wp-includes/rss.php

Likely

11/9/14

157

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/schema.php 1018

ctf-f2014/www/wp-admin/includes/schema.php

Likely

11/9/14

27

PHP files within ctf-f2014.zip

ctf-f2014/.../SimplePie/Source.php 74

ctf-f2014/www/wp-includes/SimplePie/Source.php

Likely

11/9/14

51

PHP files within ctf-f2014.zip

ctf-f2014/.../taxonomy.php 1298

ctf-f2014/www/wp-includes/taxonomy.php

Likely

11/9/14

83

PHP files within ctf-f2014.zip

ctf-f2014/.../taxonomy.php 1311

ctf-f2014/www/wp-includes/taxonomy.php

Likely

11/9/14

119

PHP files within ctf-f2014.zip

ctf-f2014/.../taxonomy.php 1400

ctf-f2014/www/wp-includes/taxonomy.php

Likely

11/9/14

16

PHP files within ctf-f2014.zip

ctf-f2014/.../taxonomy.php 1434

ctf-f2014/www/wp-includes/taxonomy.php

Likely

11/9/14

190

PHP files within ctf-f2014.zip

ctf-f2014/.../taxonomy.php 1685

ctf-f2014/www/wp-includes/taxonomy.php

Likely

11/9/14

18

PHP files within ctf-f2014.zip

ctf-f2014/.../taxonomy.php 3769

ctf-f2014/www/wp-includes/taxonomy.php

Likely

11/9/14

129

PHP files within ctf-f2014.zip

ctf-f2014/.../update-core.php 868

ctf-f2014/www/wp-admin/includes/update-core.php

Likely

11/9/14

62

PHP files within ctf-f2014.zip

ctf-f2014/.../update-core.php 929

ctf-f2014/www/wp-admin/includes/update-core.php

Likely

11/9/14

19

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/upgrade.php 546

ctf-f2014/www/wp-admin/includes/upgrade.php

Likely

11/9/14

21

PHP files within ctf-f2014.zip

ctf-f2014/.../user-new.php 75

ctf-f2014/www/wp-admin/user-new.php

Likely

11/9/14

### [Directory Traversal (4 flaws)]

#### Description

Allowing user input to control paths used in filesystem operations may enable
an attacker to access or modify otherwise protected system resources that
would normally be inaccessible to end users. In some cases, the user-provided
input may be passed directly to the filesystem operation, or it may be
concatenated to one or more fixed strings to construct a fully-qualified path.

When an application improperly cleanses special character sequences in user-
supplied filenames, a path traversal (or directory traversal) vulnerability
may occur. For example, an attacker could specify a filename such as
"../../etc/passwd", which resolves to a file outside of the intended directory
that the attacker would not normally be authorized to view.

#### Recommendations

Assume all user-supplied input is malicious. Validate all user-supplied input
to ensure that it conforms to the expected format, using centralized data
validation routines when possible. When using black lists, be sure that the
sanitizing routine performs a sufficient number of iterations to remove all
instances of disallowed characters and ensure that the end result is not
dangerous.

#### Associated Flaws by CWE ID:

### [External Control of File Name or Path ][CWE ID 73](http://cwe.mitre.org/data/definitions/73.html) (4 Flaws)

#### Effort to Fix

2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.

#### Description

This call contains a path manipulation flaw. The argument to the function is a
filename constructed using user-supplied input. If an attacker is allowed to
specify all or part of the filename, it may be possible to gain unauthorized
access to files on the server, including those outside the webroot, that would
be normally be inaccessible to end users. The level of exposure depends on the
effectiveness of input validation routines, if any.

#### Recommendations

Validate all user-supplied input to ensure that it conforms to the expected
format, using centralized data validation routines when possible. When using
black lists, be sure that the sanitizing routine performs a sufficient number
of iterations to remove all instances of disallowed characters.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

20

PHP files within ctf-f2014.zip

.../includes/class-wp-upgrader.php 1780

ctf-f2014/www/wp-admin/includes/class-wp-upgrader.php

Likely

11/9/14

23

PHP files within ctf-f2014.zip

ctf-f2014/.../Engine/shell.php 42

ctf-f2014/www/wp-includes/Text/Diff/Engine/shell.php

Likely

11/9/14

25

PHP files within ctf-f2014.zip

ctf-f2014/.../Engine/shell.php 43

ctf-f2014/www/wp-includes/Text/Diff/Engine/shell.php

Likely

11/9/14

4

plupload.silverlight.xap

void !ctor(System.IO.FileInfo) 88%

moxie_dll.Moxiecode.Com.Buffer

Likely

11/9/14

#### [Low (7 Flaws)]

### [Information Leakage (7 flaws)]

#### Description

An information leak is the intentional or unintentional disclosure of
information that is either regarded as sensitive within the product's own
functionality or provides information about the product or its environment
that could be useful in an attack. Information leakage issues are commonly
overlooked because they cannot be used to directly exploit the application.
However, information leaks should be viewed as building blocks that an
attacker uses to carry out other, more complicated attacks.

There are many different types of problems that involve information leaks,
with severities that can range widely depending on the type of information
leaked and the context of the information with respect to the application.
Common sources of information leakage include, but are not limited to:

  * Source code disclosure
  * Browsable directories
  * Log files or backup files in web-accessible directories
  * Unfiltered backend error messages
  * Exception stack traces
  * Server version information
  * Transmission of uninitialized memory containing sensitive data

#### Recommendations

Configure applications and servers to return generic error messages and to
suppress stack traces from being displayed to end users. Ensure that errors
generated by the application do not provide insight into specific backend
issues.

Remove all backup files, binary archives, alternate versions of files, and
test files from web-accessible directories of production servers. The only
files that should be present in the application's web document root are files
required by the application. Ensure that deployment procedures include the
removal of these file types by an administrator. Keep web and application
servers fully patched to minimize exposure to publicly-disclosed information
leakage vulnerabilities.

#### Associated Flaws by CWE ID:

### [Information Exposure Through an Error Message ][CWE ID 209](http://cwe.mitre.org/data/definitions/209.html) (7 Flaws)

#### Effort to Fix

1 - Trivial implementation error. Fix is up to 5 lines of code. One hour or
less to fix.

#### Description

The software generates an error message that includes sensitive information
about its environment, users, or associated data. The sensitive information
may be valuable information on its own (such as a password), or it may be
useful for launching other, more deadly attacks. If an attack fails, an
attacker may use error information provided by the server to launch another
more focused attack. For example, file locations disclosed by an exception
stack trace may be leveraged by an attacker to exploit a path traversal issue
elsewhere in the application.

#### Recommendations

Ensure that only generic error messages are returned to the end user that do
not reveal any additional details.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

43

PHP files within ctf-f2014.zip

ctf-f2014/www/board.php 18

ctf-f2014/www/board.php

Neutral

194

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/dblib.php 8

ctf-f2014/www/includes/dblib.php

Neutral

128

PHP files within ctf-f2014.zip

ctf-f2014/.../includes/dblib.php 27

ctf-f2014/www/includes/dblib.php

Neutral

185

PHP files within ctf-f2014.zip

ctf-f2014/.../scoreboard/index.php 34

ctf-f2014/www/scoreboard/index.php

Neutral

13

PHP files within ctf-f2014.zip

ctf-f2014/.../scoreboard/index.php 109

ctf-f2014/www/scoreboard/index.php

Neutral

200

PHP files within ctf-f2014.zip

ctf-f2014/.../wp-admin/plugins.php 284

ctf-f2014/www/wp-admin/plugins.php

Neutral

160

PHP files within ctf-f2014.zip

ctf-f2014/.../network/themes.php 153

ctf-f2014/www/wp-admin/network/themes.php

Neutral

#### Very Low (0 Flaws)

#### [Info (8 Flaws)]

### [Untrusted Initialization (8 flaws)]

#### Description

Applications should be reluctant to trust variables that have been initialized
outside of its trust boundary. Untrusted initialization refers to instances in
which an application allows external control of system settings or variables,
which can disrupt service or cause an application to behave in unexpected
ways. For example, if an application uses values from the environment,
assuming the data cannot be tampered with, it may use that data in a dangerous
way.

#### Recommendations

Compartmentalize the application and determine where the trust boundaries
exist, then treat any input or control outside the trust boundary as
potentially hostile. In general, do not allow user-provided or otherwise
untrusted data to control sensitive values.

#### Associated Flaws by CWE ID:

### [External Initialization of Trusted Variables or Data Stores][CWE ID 454](http://cwe.mitre.org/data/definitions/454.html) (8 Flaws)

#### Effort to Fix

4 - Simple design error. Requires redesign and up to 5 days to fix.

#### Description

A function is used to process options passed into a command line application.
The optarg variable is used to store any additional arguments that an option
requires. If optarg is used in an unbounded string copy, an attacker can
specify overly long command line arguments and overflow the destination
buffer, potentially resulting in execution of arbitrary code.

#### Recommendations

Be sure to limit the size of data copied from the optarg variable.

#### Instances found via Static Scan

Flaw IdModuleLocationExploitabilityFix By

148

PHP files within ctf-f2014.zip

.../class-phpmailer.php 1050

ctf-f2014/www/wp-includes/class-phpmailer.php

Neutral

203

PHP files within ctf-f2014.zip

.../class-phpmailer.php 1065

ctf-f2014/www/wp-includes/class-phpmailer.php

Neutral

115

PHP files within ctf-f2014.zip

ctf-f2014/.../ID3/getid3.lib.php 602

ctf-f2014/www/wp-includes/ID3/getid3.lib.php

Neutral

44

PHP files within ctf-f2014.zip

ctf-f2014/.../ID3/getid3.lib.php 1356

ctf-f2014/www/wp-includes/ID3/getid3.lib.php

Neutral

31

PHP files within ctf-f2014.zip

ctf-f2014/.../ID3/getid3.php 190

ctf-f2014/www/wp-includes/ID3/getid3.php

Neutral

14

PHP files within ctf-f2014.zip

ctf-f2014/.../ID3/getid3.php 1337

ctf-f2014/www/wp-includes/ID3/getid3.php

Neutral

175

PHP files within ctf-f2014.zip

ctf-f2014/.../ID3/getid3.php 1349

ctf-f2014/www/wp-includes/ID3/getid3.php

Neutral

98

PHP files within ctf-f2014.zip

ctf-f2014/.../Engine/shell.php 50

ctf-f2014/www/wp-includes/Text/Diff/Engine/shell.php

Neutral

